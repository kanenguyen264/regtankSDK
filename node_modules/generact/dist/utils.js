'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replicate = exports.replaceContents = exports.getComponentFiles = exports.getFiles = exports.isSingleFile = exports.getComponentFolder = exports.getComponentName = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _path = require('path');

var _lodash = require('lodash');

var _chalk = require('chalk');

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _listReactFiles = require('list-react-files');

var _listReactFiles2 = _interopRequireDefault(_listReactFiles);

var _fsExtra = require('fs-extra');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const removeExt = path => path.replace(/\.[^.]+$/, '');

const getComponentName = exports.getComponentName = path => path.split('/').reduce((name, part) => {
  if (/^[A-Z]/.test(part)) {
    return removeExt(part);
  } else if (/^((?!index).+)\.[^.]+$/.test(part)) {
    return (0, _lodash.upperFirst)((0, _lodash.camelCase)(removeExt(part)));
  }
  return name;
}, '');

const getComponentFolder = exports.getComponentFolder = path => {
  const name = getComponentName(path);
  return (0, _path.dirname)(path).split('/').reduce((folder, part) => {
    if (removeExt(part) === name) {
      return folder;
    }
    return (0, _path.join)(folder, part);
  }, './');
};

const isSingleFile = exports.isSingleFile = path => {
  const name = getComponentName(path);

  var _dirname$split$revers = (0, _path.dirname)(path).split('/').reverse(),
      _dirname$split$revers2 = _slicedToArray(_dirname$split$revers, 1);

  const dir = _dirname$split$revers2[0];


  return dir !== name;
};

const getFiles = exports.getFiles = (cwd, componentName) => {
  const extensions = '{js,ts,jsx,tsx,css,less,scss,sass,sss,json,md,mdx}';
  const pattern = componentName ? `**/${componentName}{.,.*.}${extensions}` : `**/*.${extensions}`;
  return _glob2.default.sync(pattern, { cwd, absolute: true, nodir: true });
};

const getComponentFiles = exports.getComponentFiles = (root, workingDir = process.cwd()) => (0, _listReactFiles2.default)(root).then(files => files.map(path => {
  const name = getComponentName(path);
  const absolutePath = (0, _path.join)(root, path);
  const relativePath = (0, _path.relative)(workingDir, absolutePath);
  return {
    name: `${name} ${(0, _chalk.gray)(relativePath)}`,
    short: name,
    value: absolutePath
  };
}));

const replaceContents = exports.replaceContents = (contents, oldName, newName) => contents.replace(new RegExp(`([^a-zA-Z0-9_$])${oldName}([^a-zA-Z0-9_$]|Container)|(['|"]./[a-zA-Z0-9_$]*?)${oldName}([a-zA-Z0-9_$]*?)`, 'g'), `$1$3${newName}$2$4`);

const replicate = exports.replicate = (() => {
  var _ref = _asyncToGenerator(function* (originalPath, answers, workingDir = process.cwd()) {
    const originalName = getComponentName(originalPath);
    const absolutePath = (0, _path.isAbsolute)(originalPath) ? originalPath : (0, _path.join)(workingDir, originalPath);

    const promises = [];

    if (isSingleFile(originalPath)) {
      const files = getFiles((0, _path.dirname)(absolutePath), originalName);

      files.forEach((() => {
        var _ref2 = _asyncToGenerator(function* (file) {
          const filename = (0, _path.basename)(file).replace(originalName, answers.name);
          const destinationPath = (0, _path.join)(workingDir, answers.folder, filename);
          const promise = (0, _fsExtra.copy)(file, destinationPath).then(function () {
            const contents = (0, _fsExtra.readFileSync)(destinationPath).toString();
            (0, _fsExtra.writeFileSync)(destinationPath, replaceContents(contents, originalName, answers.name));
          });
          promises.push(promise);
        });

        return function (_x3) {
          return _ref2.apply(this, arguments);
        };
      })());
    } else {
      const destinationPath = (0, _path.join)(workingDir, answers.folder, answers.name);
      yield (0, _fsExtra.copy)((0, _path.dirname)(absolutePath), destinationPath);
      const files = getFiles(destinationPath);

      files.forEach(function (file) {
        const contents = (0, _fsExtra.readFileSync)(file).toString();
        const renamedPath = (0, _path.join)((0, _path.dirname)(file), (0, _path.basename)(file).replace(originalName, answers.name));
        (0, _fsExtra.writeFileSync)(file, replaceContents(contents, originalName, answers.name));
        const promise = (0, _fsExtra.move)(file, renamedPath);
        promises.push(promise);
      });
    }
    yield Promise.all(promises);
  });

  return function replicate(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,